<%_

  const entityClass = _.capitalize(method.operationId)
  const entityInstance = method.operationId
  const dartFields = method.properties

  const index = {};
  let hasUserRelationship = false;
  const id = {};
  var i=0;

  var responseType = ''
  var desc = ''
  var summary = ''
  var serviceName = ''
  var parametersString = ''
  var parameterItems = ''
  var hasResponse = false

  for (i in services) { 
    if(services[i].serviceName == entityInstance) {

      desc = services[i].desc
      summary = services[i].summary
      serviceName = services[i].serviceName
      parametersString = services[i].parametersString
      parameterItems = services[i].parameterItems

      if(services[i].responseType){
        if(services[i].responseType != 'void'){
          responseType = _.capitalize(services[i].responseType.toLowerCase())
          hasResponse = true
        }
      }
    }
  }

_%>
import 'package:flutter/material.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';

import 'package:<%= appsName %>/services/apps_services.dart'; 
<% if(hasResponse) {%>import 'package:<%= appsName %>/models/<%= responseType.toLowerCase() %>.dart';<%}%>

final <%= entityInstance %>Bloc = ChangeNotifierProvider<<%= entityClass %>Bloc>((ref) => <%= entityClass %>Bloc());

/// <%= info.title %>
/// @version <%= info.version %>
class <%= entityClass %>Bloc extends ChangeNotifier {

  String formTitle = '<% if(summary) {%><%= summary %>:<%}%> <%= desc %>';
  bool success = false;
  bool loading = false;

  save(){}

  /// <%= summary  %>
  /// <%= desc %> 
  <% if(hasResponse) {%>Future<<%= responseType %>> <%= serviceName %>(<%= parametersString %>) async {  
    var response = await AppsServices.<%= serviceName %>(<% for (x in parameterItems) {%><%= parameterItems[x].name %>,<%}%>); 
    return response;
  }<%} else {%><%= serviceName %>(<%= parametersString %>) async {  
    await AppsServices.<%= serviceName %>(<% for (x in parameterItems) {%><%= parameterItems[x].name %>,<%}%>); 
  } <%}%>
}
