<%_
const variables = {};
const dartFields = {};
const index = {};

const defaultVariablesValues = {};
let hasUserRelationship = false;
let dartKeyType;
if (pkType === 'String') {
    dartKeyType = 'string';
} else {
    dartKeyType = 'number';
}
variables['id'] = 'id';

const id = {};
var i = 0;
id['type'] = 'int';
id['name'] = 'id';
id['i']=i;
dartFields['id'] = id;

fields.forEach(field => {
    i++;
    const varValue = {};
    const fieldType = field.fieldType.dart;
    const fieldName = field.fieldName;
    let dartType;
    let desc;
    if (field.fieldIsEnum) {
        dartType = 'enum';
    } 

    varValue['type'] = dartType;
    varValue['name'] = fieldName;
    varValue['desc'] = desc;
    varValue['i']=i;
    
    dartFields[fieldName] = varValue;
});

relationships.forEach(rela => { 
    if( rela.relationshipType == 'many-to-one' || 
        rela.relationshipType == 'one-to-one' && 
        rela.ownerSide == true  || 
        rela.relationshipType == 'many-to-many'  
        && rela.ownerSide == true ){
        
        const varValue = {};
        varValue['type'] = capitalize(rela.otherEntityName);
        varValue['name'] = rela.relationshipName;
        varValue['desc'] = 'relationship';
        varValue['isList'] = (rela.relationshipType=='many-to-many')?true:false;
        
        dartFields[rela.otherEntityName] = varValue;
    }
});

function capitalize(text){
    return text.substr( 0, 1 ).toUpperCase()+text.substr( 1 );
}

_%>
import 'dart:convert';
import 'package:equatable/equatable.dart';
<% for (idx in dartFields) { if (dartFields[idx]['desc'] == 'relationship') {%>
import '../../<%- idx %>/models/<%- idx %>.dart';<%}} %>

class <%= entityClass %> extends Equatable{
<% for (idx in dartFields) { 
    if (dartFields[idx]['type'] == 'enum') { %>
    final String? <%= dartFields[idx]['name'] %>;
<% } else if (dartFields[idx]['desc'] == 'relationship') { %>
    <% if(dartFields[idx]['isList']) { %>
    final List<<%- dartFields[idx]['type'] %>>? <%- dartFields[idx]['name'] %>;
<% } else { %>final <%= dartFields[idx]['type'] %>? <%= dartFields[idx]['name'] %>; 
    <% } } else { %>
    final <%- dartFields[idx]['type'] %>? <%- dartFields[idx]['name'] %>;<% } } %>
    
    const <%= entityClass %> ({ <% for (idx in dartFields) { if (dartFields[idx]['desc'] == 'relationship') { %>
        this.<%- dartFields[idx]['name'] %>,<%} else {%> 
        this.<%- dartFields[idx]['name'] %>,<% }} %> 
    });

    factory <%= entityClass %>.fromJson(Map<String, dynamic> json) =>  <%= entityClass %>(<% for (idx in dartFields) { if (dartFields[idx]['desc'] == 'relationship') {%>
        <% if(dartFields[idx]['isList']) {%>  
        <%= dartFields[idx]['name'] %>: List<<%= dartFields[idx]['type'] %>>.from(json['<%= dartFields[idx]['name'] %>'].map((x) => <%= dartFields[idx]['type'] %>.fromJson(x))), 
        <%} else { %><%= dartFields[idx]['name'] %>: <%= capitalize(dartFields[idx]['type']) %>.fromJson(json['<%= dartFields[idx]['name'] %>']), 
        <%} } else {%><%- dartFields[idx]['name'] %>: json['<%- dartFields[idx]['name'] %>'],<% }} %>
    );

    Map<String, dynamic> toJson() => {<% for (idx in dartFields) { if (dartFields[idx]['desc'] == 'relationship') {%>
        <% if(dartFields[idx]['isList']) {%>"<%= dartFields[idx]['name'] %>": List<dynamic>.from(<%= dartFields[idx]['name'] %>.map((x) => x.toJson())), 
        <%} else { %>"<%= dartFields[idx]['name'] %>": <%= dartFields[idx]['name'] %>.toJson(),
        <%} } else {%>"<%- dartFields[idx]['name'] %>": <%- dartFields[idx]['name'] %>,
        <% }} %>
    };

    static List<<%= entityClass %>> listFromString(String str) => new List<<%= entityClass %>>.from(json.decode(str).map((x) => <%= entityClass %>.fromJson(x)));

    static List<<%= entityClass %>> listFromJson(List<dynamic> data) {
        return data.map((post) => <%= entityClass %>.fromJson(post)).toList();
    }

    static String list<%= entityClass %>ToJson(List<<%= entityClass %>> data) => json.encode(new List<dynamic>.from(data.map((x) => x.toJson())));

    @override
    List<Object> get props => [name];
}

class <%= entityClass %>List {
  final List<<%= entityClass %>>? <%= entityInstance %>s;

  <%= entityClass %>List({
    this.<%= entityInstance %>s,
  });

  factory <%= entityClass %>List.fromJson(List<dynamic> json) {
    List<<%= entityClass %>> <%= entityInstance %>s = [];
    <%= entityInstance %>s = json.map((post) => <%= entityClass %>.fromJson(post)).toList();

    return <%= entityClass %>List(
      <%= entityInstance %>s: <%= entityInstance %>s,
    );
  }
}

<%_ const enumsAlreadyDeclared = [];
fields.forEach(field => {
    if (field.fieldIsEnum && enumsAlreadyDeclared.indexOf(field.fieldType.dart) === -1) {
        enumsAlreadyDeclared.push(field.fieldType.dart); _%>
    const <%= field.fieldType.dart %> = {<%
    const enums = field.fieldValues.split(',');
        for (let i = 0; i < enums.length; i++) { %>
    '<%= enums[i] %>'<%if (i < enums.length - 1) { %>,<% }
        } %>
}; <%_ } }); _%>

