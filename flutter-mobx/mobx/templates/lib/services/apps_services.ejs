import 'dart:async';
import 'dart:convert';

import 'package:<%= appsName %>/services/network/rest_services.dart';
<% for (i in entities) { %>
import 'package:<%= appsName %>/models/<%= entities[i].entityInstance %>.dart'; <%}%>

/// <%= info.title%>
/// @version <%= info.version%>
class <%= capitalize(appsName) %>Services { <% for (i in paths) { 

  console.log('i>'+i)
  console.log(paths[i].path)

  %>
<% for (m in paths[i].methods) { 

console.log('m>'+m)
//console.log(paths[i].methods[m])


  const path = paths[i].path?paths[i].path:''; 
  const methodName = paths[i].methods[m].operationId?paths[i].methods[m].operationId:'';
 
  const summary = paths[i].methods[m].summary?paths[i].methods[m].summary:'';
  const methodPath = validatePath(paths[i].methods[m].method);
  const desc = paths[i].methods[m].description?paths[i].methods[m].description:''; 
  console.log('----1---'+m)
  // REQUEST
  const requestBody = paths[i].methods[m].requestBody;
  //const requestBodyClass = requestBody.component? requestBody.component : ''; 
  console.log('----2-1--'+m)
  // RESPONSE
  const responses = paths[i].methods[m].responses;
  console.log('----2-2--'+m)
  console.log(responses.find(e=> e.code == '200'))

  const code200 = responses.find(e=> e.code == '200')
  console.log(code200)
  const responseContent = code200? code200 : {}
  console.log('----2-3--'+m)
  let resType = 'void'
  console.log('----2-4--'+m)

  console.log(responseContent.items)
  console.log(responseContent.component)
  if(responseContent.content.component) 
    resType = responseContent.content.component 
  else if (responseContent.content.items.type)
    resType = capitalize(responseContent.content.items.type+''+i)
  else resType = 'Object'+i

  console.log('----2-5--'+m)
  console.log(resType);
  //else if(responseContent.items) 
    //resType = responseContent.items.type
  
  console.log('----3---'+m)
  // PARAMETER
  const param =  putParam(paths[i].methods[m]);
  const parameters = param.param;
  const query = param.query;

  const isInput = resType? true:false;
 
  console.log('----4---'+m)
  

  let payload = '';
  let payloadStatement = '';
  if(methodPath == 'post' || methodPath == 'update'){
    payload = ', '+ param.payload;
    payloadStatement = param.payloadStatement;
  }
  console.log('--10--'+m)
%>
  /// <%= summary %><% if(desc){ %>
  /// <%= desc %> <%}%>
  static Future<<%= resType %>> <%= methodName %>(<%= parameters %>) async { 
    <%= payloadStatement %>
    var response = await RestServices.<%= methodPath %>('<%= path %><%= query %>'<%= payload %>); 
    <% if(isInput){ %>return <%= resType %>.fromJson(json.decode(response));<%}%>
  }
  <% } } %>
}

<%
function putParam(input){
  let result = '';
  let param = {}
  let isProp = false
  if(input.parameters)
    param = input.parameters
  else {
    param = input.requestBody.properties;
    isProp = true
  }

  let query = ''
  let addComma = '';
  let payload = '';
  let payloadStatement = '';

  if(param){
    
    let req = ''
    let n = param.length
    let comma =''
    let and = '';
    let q = 0;

    if(param.required)
      req = '@required '

    if(param.length > 0)
      addComma = ', '

    for(p in param){
      result += comma + req + capitalize(isProp?param[p].dartType.type : param[p].schema.type)+' '+param[p].name ;

      if(q > 0)
        and='%26'

      if(param[p].in == 'query'){
        query += and + param[p].name + '=${'+ param[p].name + '}'
        q++;
      }
      n--;

      if(n>0)
        comma =', '
    }
  }

  // add parameter if there is payload
  /* if(input.requestBody){
    const pload = capitalize(input.requestBody)+' '+input.requestBody;
    result += addComma + pload;
    payload = input.requestBody;
    payloadStatement = capitalize(input.requestBody)+' '+ input.requestBody + ' = ' + capitalize(input.requestBody) +'();'
  } */

  if(query)
    query = '?'+query

  return {param: result, query: query, payload: payload, payloadStatement: payloadStatement};
}

function capitalize(text){
  if(text)
    return text.substr( 0, 1 ).toUpperCase()+text.substr( 1 );
  else ''
}

function validatePath(m){
  let method = m;
  if(m == 'put')
    method = 'update';
  else if (m == 'get')
    method = 'fetch';

  return method;
}
%>