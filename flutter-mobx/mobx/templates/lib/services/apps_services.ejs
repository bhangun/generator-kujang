import 'dart:async';
import 'dart:convert';

import 'package:<%= appsName %>/services/network/rest_services.dart';
<% for (i in entities) { %>
import 'package:<%= appsName %>/models/<%= entities[i].entityInstance %>.dart'; <%}%>

/// <%= info.title%>
/// @version <%= info.version%>
class <%= capitalize(appsName) %>Services { <% for (i in paths) { 
  //console.log('i>'+i)
  //console.log(paths[i].path)
  %>
<% for (m in paths[i].methods) { 

//console.log('m>'+m)
//console.log(paths[i].methods[m])


  const path = paths[i].path?paths[i].path:'';
  const requestType = paths[i].methods[m].requestBodyType?paths[i].methods[m].requestBodyType:'';
  const requestClass = capitalize(requestType);
  const requestBodyClass = capitalize(requestType); 
  const responseClass = (paths[i].methods[m].responseType)?capitalize(paths[i].methods[m].responseType):capitalize(paths[i].methods[m].tags[0]); 
  const methodName = paths[i].methods[m].operationId?paths[i].methods[m].operationId:'';
  const isInput = requestType?true:false;
  const methodPath = validatePath(paths[i].methods[m].method);
  const desc = paths[i].methods[m].description?paths[i].methods[m].description:''; 
  const summary = paths[i].methods[m].summary?paths[i].methods[m].summary:'';
  const param =  putParam(paths[i].methods[m]);
  const parameters = param.param;
  const query = param.query;

  let payload = '';
  let payloadStatement = '';
  if(methodPath == 'post' || methodPath == 'update'){
    payload = ', '+param.payload;
    payloadStatement = param.payloadStatement;
  }

%>
  /// <%= summary %><% if(desc){%>
  /// <%= desc %> <%}%>
  static Future<<%= responseClass %>> <%= methodName %>(<%= parameters %>) async { 
    <%= payloadStatement %>
    var response = await RestServices.<%= methodPath %>('<%= path %><%= query %>'<%= payload %>); 
    <%if(isInput){%>return <%= requestBodyClass %>.fromJson(json.decode(response));<%}%>
  }
  <% } } %>
}

<%
function putParam(input){
  let result = '';
  let param = input.parameters;
  let query = ''
  let addComma = '';
  let payload = '';
  let payloadStatement = '';

  if(param){
    
    let req = ''
    let n = param.length
    let comma =''
    let and = '';
    let q = 0;

    if(param.required)
      req = '@required '

    if(param.length > 0)
      addComma = ', '

    for(p in param){
      result += comma + req + capitalize(param[p].schema.type)+' '+param[p].name ;

      if(q > 0)
        and='%26'

      if(param[p].in == 'query'){
        query += and + param[p].name + '=${'+ param[p].name + '}'
        q++;
      }
      n--;

      if(n>0)
        comma =', '
      
    }
  }

  // add parameter if there is payload
  if(input.requestBodyType){
    const pload = capitalize(input.requestBodyType)+' '+input.requestBodyType;
    result += addComma + pload;
    payload = input.requestBodyType;
    payloadStatement = capitalize(input.requestBodyType)+' '+ input.requestBodyType + ' = ' + capitalize(input.requestBodyType) +'();'
  }

  if(query)
    query = '?'+query

  return {param: result, query: query, payload: payload, payloadStatement: payloadStatement};
}

function capitalize(text){
  if(text)
    return text.substr( 0, 1 ).toUpperCase()+text.substr( 1 );
  else ''
}

function validatePath(m){
  let method = m;
  if(m == 'put')
    method = 'update';
  else if (m == 'get')
    method = 'fetch';

  return method;
}
%>