
https://petstore3.swagger.io/api/v3/pet/findByStatus?status=available



  if (type.type == 'integer' && type.format == 'int64') {
    newType.dart = 'double'
  } else if (type.type == 'integer' && type.format == 'int32') {
    newType.dart = 'int'
  } else if (type.type == 'number' && type.format == 'float') {
    newType.dart = 'Float'
  } else if (type.type == 'number' && type.format == 'double') {
    newType.dart = 'double'
  } else if (type.type == 'string' && type.format == 'byte') {
    newType.dart = 'ByteData'
  } else if (type.type == 'string' && type.format == 'binary') {
    newType.dart = 'BinaryCodec'
  } else if (type.type == 'boolean') {
    newType.dart = 'boolean'
  } else if (type.type == 'string' && type.format == 'date') {
    newType.dart = 'DateTime'
  } else if (type.type == 'Instant') {
    newType.dart = 'int'
    newType.dartDesc = '.toIso8601String()' + 'Z'
  } else if (type.type == 'string' && type.format == 'date-time') {
    newType.dart = 'DateTime'
  } else if (type.type == 'string' && type.format == 'password') {
    newType.dart = 'String'
  }
  
  
--------------------------
{
  appsName: 'kut01',
  baseName: undefined,
  packageFolder: 'kut01',
  info: {
    title: 'Swagger Petstore - OpenAPI 3.0',
    description: 'This is a sample Pet Store Server based on the OpenAPI 3.0 specification.  You can find out more about\n' +
      "Swagger at [http://swagger.io](http://swagger.io). In the third iteration of the pet store, we've switched to the design first approach!\n" +
      "You can now help us improve the API whether it's by making changes to the definition itself or to the code.\n" +
      'That way, with time, we can improve the API in general, and expose some of the new features in OAS3.\n' +
      '\n' +
      'Some useful links:\n' +
      '- [The Pet Store repository](https://github.com/swagger-api/swagger-petstore)\n' +
      '- [The source API definition for the Pet Store](https://github.com/swagger-api/swagger-petstore/blob/master/src/main/resources/openapi.yaml)',
    termsOfService: 'http://swagger.io/terms/',
    contact: { email: 'apiteam@swagger.io' },
    license: {
      name: 'Apache 2.0',
      url: 'http://www.apache.org/licenses/LICENSE-2.0.html'
    },
    version: '1.0.6'
  },
  entities: [
    {
      appsName: 'kut01',
      pkType: 'String',
      relationships: [],
      entityName: 'Order',
      entityClass: 'Order',
      entityInstance: 'Order',
      entityFolderName: 'Order',
      entityFileName: 'Order',
      enableTranslation: false,
      fields: [
        {
          fieldType: '',
          fieldName: 'id',
          fieldIsEnum: false,
          fieldValues: '',
          fieldDescription: undefined,
          fieldsContainOneToMany: false,
          fieldsContainOwnerManyToMany: false,
          fieldsContainOwnerOneToOne: false,
          fieldsContainNoOwnerOneToOne: false,
          fieldsContainManyToOne: false
        },
        {
          fieldType: '',
          fieldName: 'petId',
          fieldIsEnum: false,
          fieldValues: '',
          fieldDescription: undefined,
          fieldsContainOneToMany: false,
          fieldsContainOwnerManyToMany: false,
          fieldsContainOwnerOneToOne: false,
          fieldsContainNoOwnerOneToOne: false,
          fieldsContainManyToOne: false
        },
        {
          fieldType: '',
          fieldName: 'quantity',
          fieldIsEnum: false,
          fieldValues: '',
          fieldDescription: undefined,
          fieldsContainOneToMany: false,
          fieldsContainOwnerManyToMany: false,
          fieldsContainOwnerOneToOne: false,
          fieldsContainNoOwnerOneToOne: false,
          fieldsContainManyToOne: false
        },
        {
          fieldType: '',
          fieldName: 'shipDate',
          fieldIsEnum: false,
          fieldValues: '',
          fieldDescription: undefined,
          fieldsContainOneToMany: false,
          fieldsContainOwnerManyToMany: false,
          fieldsContainOwnerOneToOne: false,
          fieldsContainNoOwnerOneToOne: false,
          fieldsContainManyToOne: false
        },
        {
          fieldType: '',
          fieldName: 'status',
          fieldIsEnum: true,
          fieldValues: 'placed,approved,delivered',
          fieldDescription: 'Order Status',
          fieldsContainOneToMany: false,
          fieldsContainOwnerManyToMany: false,
          fieldsContainOwnerOneToOne: false,
          fieldsContainNoOwnerOneToOne: false,
          fieldsContainManyToOne: false
        },
        {
          fieldType: '',
          fieldName: 'complete',
          fieldIsEnum: false,
          fieldValues: '',
          fieldDescription: undefined,
          fieldsContainOneToMany: false,
          fieldsContainOwnerManyToMany: false,
          fieldsContainOwnerOneToOne: false,
          fieldsContainNoOwnerOneToOne: false,
          fieldsContainManyToOne: false
        }
      ]
    },
    {
      appsName: 'kut01',
      pkType: 'String',
      relationships: [],
      entityName: 'Customer',
      entityClass: 'Customer',
      entityInstance: 'Customer',
      entityFolderName: 'Customer',
      entityFileName: 'Customer',
      enableTranslation: false,
      fields: [Array]
    },
    {
      appsName: 'kut01',
      pkType: 'String',
      relationships: [],
      entityName: 'Address',
      entityClass: 'Address',
      entityInstance: 'Address',
      entityFolderName: 'Address',
      entityFileName: 'Address',
      enableTranslation: false,
      fields: [Array]
    },
    {
      appsName: 'kut01',
      pkType: 'String',
      relationships: [],
      entityName: 'Category',
      entityClass: 'Category',
      entityInstance: 'Category',
      entityFolderName: 'Category',
      entityFileName: 'Category',
      enableTranslation: false,
      fields: [Array]
    },
    {
      appsName: 'kut01',
      pkType: 'String',
      relationships: [],
      entityName: 'User',
      entityClass: 'User',
      entityInstance: 'User',
      entityFolderName: 'User',
      entityFileName: 'User',
      enableTranslation: false,
      fields: [Array]
    },
    {
      appsName: 'kut01',
      pkType: 'String',
      relationships: [],
      entityName: 'Tag',
      entityClass: 'Tag',
      entityInstance: 'Tag',
      entityFolderName: 'Tag',
      entityFileName: 'Tag',
      enableTranslation: false,
      fields: [Array]
    },
    {
      appsName: 'kut01',
      pkType: 'String',
      relationships: [],
      entityName: 'Pet',
      entityClass: 'Pet',
      entityInstance: 'Pet',
      entityFolderName: 'Pet',
      entityFileName: 'Pet',
      enableTranslation: false,
      fields: [
        {
          fieldType: '',
          fieldName: 'id',
          fieldIsEnum: false,
          fieldValues: '',
          fieldDescription: undefined,
          fieldsContainOneToMany: false,
          fieldsContainOwnerManyToMany: false,
          fieldsContainOwnerOneToOne: false,
          fieldsContainNoOwnerOneToOne: false,
          fieldsContainManyToOne: false
        },
        {
          fieldType: '',
          fieldName: 'name',
          fieldIsEnum: false,
          fieldValues: '',
          fieldDescription: undefined,
          fieldsContainOneToMany: false,
          fieldsContainOwnerManyToMany: false,
          fieldsContainOwnerOneToOne: false,
          fieldsContainNoOwnerOneToOne: false,
          fieldsContainManyToOne: false
        },
        {
          fieldType: '',
          fieldName: 'category',
          fieldIsEnum: false,
          fieldValues: '',
          fieldDescription: undefined,
          fieldsContainOneToMany: false,
          fieldsContainOwnerManyToMany: false,
          fieldsContainOwnerOneToOne: false,
          fieldsContainNoOwnerOneToOne: false,
          fieldsContainManyToOne: false
        },
        {
          fieldType: '',
          fieldName: 'photoUrls',
          fieldIsEnum: false,
          fieldValues: '',
          fieldDescription: undefined,
          fieldsContainOneToMany: false,
          fieldsContainOwnerManyToMany: false,
          fieldsContainOwnerOneToOne: false,
          fieldsContainNoOwnerOneToOne: false,
          fieldsContainManyToOne: false
        },
        {
          fieldType: '',
          fieldName: 'tags',
          fieldIsEnum: false,
          fieldValues: '',
          fieldDescription: undefined,
          fieldsContainOneToMany: false,
          fieldsContainOwnerManyToMany: false,
          fieldsContainOwnerOneToOne: false,
          fieldsContainNoOwnerOneToOne: false,
          fieldsContainManyToOne: false
        },
        {
          fieldType: '',
          fieldName: 'status',
          fieldIsEnum: true,
          fieldValues: 'available,pending,sold',
          fieldDescription: 'pet status in the store',
          fieldsContainOneToMany: false,
          fieldsContainOwnerManyToMany: false,
          fieldsContainOwnerOneToOne: false,
          fieldsContainNoOwnerOneToOne: false,
          fieldsContainManyToOne: false
        }
      ]
    },
    {
      appsName: 'kut01',
      pkType: 'String',
      relationships: [],
      entityName: 'ApiResponse',
      entityClass: 'ApiResponse',
      entityInstance: 'ApiResponse',
      entityFolderName: 'ApiResponse',
      entityFileName: 'ApiResponse',
      enableTranslation: false,
      fields: [Array]
    }
  ],
  paths: [
      { 
        path: '/pet', 
        methods: [
          {},
          {
          }
        ]
      },
      { path: '/pet/findByStatus', 
        methods: [
          {
            method: 'get',
            parameters: [
              {
                name: 'status',
                in: 'query',
                description: 'Status values that need to be considered for filter',
                required: false,
                explode: true,
                schema: [Object]
              }
            ],
            tags: [ 'pet' ],
            summary: 'Finds Pets by status',
            description: 'Multiple status values can be provided with comma separated strings',
            operationId: 'findPetsByStatus',
            requestBodyDesc: '',
            requestBodyType: '',
            requestBodyRequired: [],
            requestContentType: [],
            responseType: '',
            responses: [
              {
                responseCode: '200',
                responseDesc: 'successful operation',
                responseType: '',
                responseContentType: [Array],
                responseHeaders: []
              },
              {
                responseCode: '400',
                responseDesc: 'Invalid status value',
                responseType: '',
                responseContentType: [],
                responseHeaders: []
              }
            ]
          }
        ] 
      },
      { path: '/pet/findByTags', methods: [Array] },
      { path: '/pet/{petId}', methods: [Array] },
      { path: '/pet/{petId}/uploadImage', methods: [Array] },
      { path: '/store/inventory', methods: [Array] },
      { path: '/store/order', methods: [Array] },
      {
        path: '/store/order/{orderId}',
        methods: [
          {
            method: 'get',
            tags: [Array],
            summary: 'Find purchase order by ID',
            description: 'For valid response try integer IDs with value <= 5 or > 10. Other values will generated exceptions',
            operationId: 'getOrderById',
            requestBodyDesc: '',
            requestBodyType: '',
            requestBodyRequired: [],
            contentType: []
          },
          {
            method: 'delete',
            tags: [Array],
            summary: 'Delete purchase order by ID',
            description: 'For valid response try integer IDs with value < 1000. Anything above 1000 or nonintegers will generate API errors',
            operationId: 'deleteOrder',
            requestBodyDesc: '',
            requestBodyType: '',
            requestBodyRequired: [],
            contentType: []
          }
        ]
      },
      { path: '/user', methods: [Array] },
      { path: '/user/createWithList', methods: [Array] },
      { path: '/user/login', methods: [Array] },
      { path: '/user/logout', methods: [Array] },
      { path: '/user/{username}', methods: [Array] }
    ]
}