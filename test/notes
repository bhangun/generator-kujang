
  
URL
https://petstore3.swagger.io/api/v3/openapi.json


  //console.log(Object.entries(Object.entries(api.paths)[0][1].post.requestBody.content)[0][1].schema.properties.tags.items)
  //console.log(Object.entries(Object.entries(api.paths)[0][1].post.requestBody.content)[2][1])
  //console.log(Object.entries(Object.entries(api.paths)[0][1].post.responses.content)[2][1])
  console.log(Object.entries(Object.entries(api.paths)[0][1].post.responses)[0][1].content)
  //console.log(Object.entries(api.paths)[0][1].post.requestBody.content)

  //console.log(Object.entries(Object.entries(api.paths)[0][1].put.responses)[0][1].content)
  //console.log(Object.entries(api.paths)[0][1].put.security)
 // console.log(Object.entries(api.components.schemas.Pet)[2])
 



----------------------------------------
{
  schema: {
    required: [ 'name', 'photoUrls' ],
    type: 'object',
    properties: {
      id: [Object],
      name: [Object],
      category: [Object],
      photoUrls: [Object],
      tags: [Object],
      status: [Object]
    },
    xml: { name: 'pet' }
  }
}


----------------------------PET POST--------------application/x-www-form-urlencoded'--------------------------
curl -X 'POST' \
  'https://petstore3.swagger.io/api/v3/pet' \
  -H 'accept: application/xml' \
  -H 'Content-Type: application/x-www-form-urlencoded' \
  -d 'id=10&name=doggie&category=%7B%0A%20%20%22id%22%3A%201%2C%0A%20%20%22name%22%3A%20%22Dogs%22%0A%7D&photoUrls=string&tags=%7B%0A%20%20%22id%22%3A%200%2C%0A%20%20%22name%22%3A%20%22string%22%0A%7D&status=pending'
----------------------------


/*
{
  openapi: '3.0.2',
  info: {
    title: 'Swagger Petstore - OpenAPI 3.0',
    description: 'This is a sample Pet Store Server based on the OpenAPI 3.0 specification.  You can find out more about\n' +
      "Swagger at [http://swagger.io](http://swagger.io). In the third iteration of the pet store, we've switched to the design first approach!\n" +
      "You can now help us improve the API whether it's by making changes to the definition itself or to the code.\n" +
      'That way, with time, we can improve the API in general, and expose some of the new features in OAS3.\n' +
      '\n' +
      'Some useful links:\n' +
      '- [The Pet Store repository](https://github.com/swagger-api/swagger-petstore)\n' +
      '- [The source API definition for the Pet Store](https://github.com/swagger-api/swagger-petstore/blob/master/src/main/resources/openapi.yaml)',
    termsOfService: 'http://swagger.io/terms/',
    contact: { email: 'apiteam@swagger.io' },
    license: {
      name: 'Apache 2.0',
      url: 'http://www.apache.org/licenses/LICENSE-2.0.html'
    },
    version: '1.0.6'
  },
  externalDocs: {
    description: 'Find out more about Swagger',
    url: 'http://swagger.io'
  },
  servers: [ { url: '/api/v3' } ],
  tags: [
    {
      name: 'pet',
      description: 'Everything about your Pets',
      externalDocs: { description: 'Find out more', url: 'http://swagger.io' }
    },
    { name: 'store', description: 'Operations about user' },
    {
      name: 'user',
      description: 'Access to Petstore orders',
      externalDocs: {
        description: 'Find out more about our store',
        url: 'http://swagger.io'
      }
    }
  ],
  paths: {
    '/pet': {
      put: {
        tags: [ 'pet' ],
        summary: 'Update an existing pet',
        description: 'Update an existing pet by Id',
        operationId: 'updatePet',
        requestBody: {
          description: 'Update an existent pet in the store',
          content: {
            'application/json': {
              schema: {
                required: [ 'name', 'photoUrls' ],
                type: 'object',
                properties: {
                  id: [Object],
                  name: [Object],
                  category: [Object],
                  photoUrls: [Object],
                  tags: [Object],
                  status: [Object]
                },
                xml: { name: 'pet' }
              }
            },
            'application/xml': {
              schema: {
                required: [Array],
                type: 'object',
                properties: [Object],
                xml: [Object]
              }
            },
            'application/x-www-form-urlencoded': {
              schema: {
                required: [Array],
                type: 'object',
                properties: [Object],
                xml: [Object]
              }
            }
          },
          required: true
        },
        responses: {
          '200': {
            description: 'Successful operation',
            content: {
              'application/xml': {
                schema: {
                  required: [Array],
                  type: 'object',
                  properties: [Object],
                  xml: [Object]
                }
              },
              'application/json': {
                schema: {
                  required: [Array],
                  type: 'object',
                  properties: [Object],
                  xml: [Object]
                }
              }
            }
          },
          '400': { description: 'Invalid ID supplied' },
          '404': { description: 'Pet not found' },
          '405': { description: 'Validation exception' }
        },
        security: [ { petstore_auth: [ 'write:pets', 'read:pets' ] } ]
      },
      post: {
        tags: [ 'pet' ],
        summary: 'Add a new pet to the store',
        description: 'Add a new pet to the store',
        operationId: 'addPet',
        requestBody: {
          description: 'Create a new pet in the store',
          content: {
            'application/json': {
              schema: {
                required: [ 'name', 'photoUrls' ],
                type: 'object',
                properties: {
                  id: { type: 'integer', format: 'int64', example: 10 },
                  name: { type: 'string', example: 'doggie' },
                  category: {
                    type: 'object',
                    properties: {
                      id: { type: 'integer', format: 'int64', example: 1 },
                      name: { type: 'string', example: 'Dogs' }
                    },
                    xml: { name: 'category' }
                  },
                  photoUrls: {
                    type: 'array',
                    xml: { wrapped: true },
                    items: { type: 'string', xml: { name: 'photoUrl' } }
                  },
                  tags: {
                    type: 'array',
                    xml: { wrapped: true },
                    items: {
                      type: 'object',
                      properties: {
                        id: { type: 'integer', format: 'int64' },
                        name: { type: 'string' }
                      },
                      xml: { name: 'tag' }
                    }
                  },
                  status: {
                    type: 'string',
                    description: 'pet status in the store',
                    enum: [ 'available', 'pending', 'sold' ]
                  }
                },
                xml: { name: 'pet' }
              }
            },
            'application/xml': {
              schema: {
                required: [Array],
                type: 'object',
                properties: [Object],
                xml: [Object]
              }
            },
            'application/x-www-form-urlencoded': {
              schema: {
                required: [Array],
                type: 'object',
                properties: [Object],
                xml: [Object]
              }
            }
          },
          required: true
        },
        responses: {
          '200': {
            description: 'Successful operation',
            content: {
              'application/xml': {
                schema: {
                  required: [Array],
                  type: 'object',
                  properties: [Object],
                  xml: [Object]
                }
              },
              'application/json': {
                schema: {
                  required: [Array],
                  type: 'object',
                  properties: [Object],
                  xml: [Object]
                }
              }
            }
          },
          '405': { description: 'Invalid input' }
        },
        security: [ [Object] ]
      }
    },
    '/pet/findByStatus': {
      get: {
        tags: [Array],
        summary: 'Finds Pets by status',
        description: 'Multiple status values can be provided with comma separated strings',
        operationId: 'findPetsByStatus',
        parameters: [Array],
        responses: [Object],
        security: [Array]
      }
    },
    '/pet/findByTags': {
      get: {
        tags: [Array],
        summary: 'Finds Pets by tags',
        description: 'Multiple tags can be provided with comma separated strings. Use tag1, tag2, tag3 for testing.',
        operationId: 'findPetsByTags',
        parameters: [Array],
        responses: [Object],
        security: [Array]
      }
    },
    '/pet/{petId}': {
      get: {
        tags: [Array],
        summary: 'Find pet by ID',
        description: 'Returns a single pet',
        operationId: 'getPetById',
        parameters: [Array],
        responses: [Object],
        security: [Array]
      },
      post: {
        tags: [Array],
        summary: 'Updates a pet in the store with form data',
        description: '',
        operationId: 'updatePetWithForm',
        parameters: [Array],
        responses: [Object],
        security: [Array]
      },
      delete: {
        tags: [Array],
        summary: 'Deletes a pet',
        description: '',
        operationId: 'deletePet',
        parameters: [Array],
        responses: [Object],
        security: [Array]
      }
    },
    '/pet/{petId}/uploadImage': {
      post: {
        tags: [Array],
        summary: 'uploads an image',
        description: '',
        operationId: 'uploadFile',
        parameters: [Array],
        requestBody: [Object],
        responses: [Object],
        security: [Array]
      }
    },
    '/store/inventory': {
      get: {
        tags: [Array],
        summary: 'Returns pet inventories by status',
        description: 'Returns a map of status codes to quantities',
        operationId: 'getInventory',
        responses: [Object],
        security: [Array]
      }
    },
    '/store/order': {
      post: {
        tags: [Array],
        summary: 'Place an order for a pet',
        description: 'Place a new order in the store',
        operationId: 'placeOrder',
        requestBody: [Object],
        responses: [Object]
      }
    },
    '/store/order/{orderId}': {
      get: {
        tags: [Array],
        summary: 'Find purchase order by ID',
        description: 'For valid response try integer IDs with value <= 5 or > 10. Other values will generated exceptions',
        operationId: 'getOrderById',
        parameters: [Array],
        responses: [Object]
      },
      delete: {
        tags: [Array],
        summary: 'Delete purchase order by ID',
        description: 'For valid response try integer IDs with value < 1000. Anything above 1000 or nonintegers will generate API errors',
        operationId: 'deleteOrder',
        parameters: [Array],
        responses: [Object]
      }
    },
    '/user': {
      post: {
        tags: [Array],
        summary: 'Create user',
        description: 'This can only be done by the logged in user.',
        operationId: 'createUser',
        requestBody: [Object],
        responses: [Object]
      }
    },
    '/user/createWithList': {
      post: {
        tags: [Array],
        summary: 'Creates list of users with given input array',
        description: 'Creates list of users with given input array',
        operationId: 'createUsersWithListInput',
        requestBody: [Object],
        responses: [Object]
      }
    },
    '/user/login': {
      get: {
        tags: [Array],
        summary: 'Logs user into the system',
        description: '',
        operationId: 'loginUser',
        parameters: [Array],
        responses: [Object]
      }
    },
    '/user/logout': {
      get: {
        tags: [Array],
        summary: 'Logs out current logged in user session',
        description: '',
        operationId: 'logoutUser',
        parameters: [],
        responses: [Object]
      }
    },
    '/user/{username}': {
      get: {
        tags: [Array],
        summary: 'Get user by user name',
        description: '',
        operationId: 'getUserByName',
        parameters: [Array],
        responses: [Object]
      },
      put: {
        tags: [Array],
        summary: 'Update user',
        description: 'This can only be done by the logged in user.',
        operationId: 'updateUser',
        parameters: [Array],
        requestBody: [Object],
        responses: [Object]
      },
      delete: {
        tags: [Array],
        summary: 'Delete user',
        description: 'This can only be done by the logged in user.',
        operationId: 'deleteUser',
        parameters: [Array],
        responses: [Object]
      }
    }
  },
  components: {
    schemas: {
      Order: {
        type: 'object',
        properties: {
          id: [Object],
          petId: [Object],
          quantity: [Object],
          shipDate: [Object],
          status: [Object],
          complete: [Object]
        },
        xml: { name: 'order' }
      },
      Customer: {
        type: 'object',
        properties: { id: [Object], username: [Object], address: [Object] },
        xml: { name: 'customer' }
      },
      Address: {
        type: 'object',
        properties: {
          street: [Object],
          city: [Object],
          state: [Object],
          zip: [Object]
        },
        xml: { name: 'address' }
      },
      Category: {
        type: 'object',
        properties: { id: [Object], name: [Object] },
        xml: { name: 'category' }
      },
      User: {
        type: 'object',
        properties: {
          id: [Object],
          username: [Object],
          firstName: [Object],
          lastName: [Object],
          email: [Object],
          password: [Object],
          phone: [Object],
          userStatus: [Object]
        },
        xml: { name: 'user' }
      },
      Tag: {
        type: 'object',
        properties: { id: [Object], name: [Object] },
        xml: { name: 'tag' }
      },
      Pet: {
        required: [ 'name', 'photoUrls' ],
        type: 'object',
        properties: {
          id: { type: 'integer', format: 'int64', example: 10 },
          name: { type: 'string', example: 'doggie' },
          category: {
            type: 'object',
            properties: { id: [Object], name: [Object] },
            xml: { name: 'category' }
          },
          photoUrls: {
            type: 'array',
            xml: { wrapped: true },
            items: { type: 'string', xml: [Object] }
          },
          tags: {
            type: 'array',
            xml: { wrapped: true },
            items: { type: 'object', properties: [Object], xml: [Object] }
          },
          status: {
            type: 'string',
            description: 'pet status in the store',
            enum: [ 'available', 'pending', 'sold' ]
          }
        },
        xml: { name: 'pet' }
      },
      ApiResponse: {
        type: 'object',
        properties: { code: [Object], type: [Object], message: [Object] },
        xml: { name: '##default' }
      }
    },
    requestBodies: {
      Pet: {
        description: 'Pet object that needs to be added to the store',
        content: {
          'application/json': {
            schema: {
              required: [Array],
              type: 'object',
              properties: [Object],
              xml: [Object]
            }
          },
          'application/xml': {
            schema: {
              required: [Array],
              type: 'object',
              properties: [Object],
              xml: [Object]
            }
          }
        }
      },
      UserArray: {
        description: 'List of user object',
        content: { 'application/json': [Object] }
      }
    },
    securitySchemes: { 
      petstore_auth: {
        type: 'oauth2',
        flows: {
          implicit: {
            authorizationUrl: 'https://petstore3.swagger.io/oauth/authorize',
            scopes: {
              'write:pets': 'modify pets in your account',
              'read:pets': 'read your pets'
            }
          }
        }
      }, 
      api_key: { 
        type: 'apiKey', 
        name: 'api_key', 
        in: 'header' 
      } 
    }
  }
}





/*

curl -X 'GET' \
  'https://petstore3.swagger.io/api/v3/pet/findByStatus?status=available' \
  -H 'accept: application/xml'

  <ArrayList>

  <item>
    <id>9688</id>
    <category>
      <id>1</id>
      <name>dog</name>
    </category>
    <name>Doggie</name>
    <photoUrls>
      <photoUrl>http://pet.photo.com/super_pet</photoUrl>
    </photoUrls>
    <tags>
      <tag>
        <id>-8697</id>
        <name>defaultTag</name>
      </tag>
    </tags>
    <status>available</status>
  </item>

  <item>
    <id>-6314</id>
    <category>
      <id>1</id>
      <name>Dogs</name>
    </category>
    <name>Chickens Flora Cain</name>
    <photoUrls>
      <photoUrl>string</photoUrl>
    </photoUrls>
    <tags>
      <tag>
        <id>250</id>
        <name>defaultTag</name>
      </tag>
    </tags>
    <status>available</status>
  </item>
  </ArrayList>


{
  openapi: '3.0.2',
  info: {
    title: 'Swagger Petstore - OpenAPI 3.0',
    description: 'This is a sample Pet Store Server based on the OpenAPI 3.0 specification.  You can find out more about\n' +
      "Swagger at [http://swagger.io](http://swagger.io). In the third iteration of the pet store, we've switched to the design first approach!\n" +
      "You can now help us improve the API whether it's by making changes to the definition itself or to the code.\n" +
      'That way, with time, we can improve the API in general, and expose some of the new features in OAS3.\n' +
      '\n' +
      'Some useful links:\n' +
      '- [The Pet Store repository](https://github.com/swagger-api/swagger-petstore)\n' +
      '- [The source API definition for the Pet Store](https://github.com/swagger-api/swagger-petstore/blob/master/src/main/resources/openapi.yaml)',
    termsOfService: 'http://swagger.io/terms/',
    contact: { email: 'apiteam@swagger.io' },
    license: {
      name: 'Apache 2.0',
      url: 'http://www.apache.org/licenses/LICENSE-2.0.html'
    },
    version: '1.0.6'
  },
  externalDocs: {
    description: 'Find out more about Swagger',
    url: 'http://swagger.io'
  },
  servers: [ { url: '/api/v3' } ],
  tags: [
    {
      name: 'pet',
      description: 'Everything about your Pets',
      externalDocs: [Object]
    },
    { name: 'store', description: 'Operations about user' },
    {
      name: 'user',
      description: 'Access to Petstore orders',
      externalDocs: [Object]
    }
  ],
  paths: {
    '/pet': { put: [Object], post: [Object] },
    '/pet/findByStatus': { get: [Object] },
    '/pet/findByTags': { get: [Object] },
    '/pet/{petId}': { get: [Object], post: [Object], delete: [Object] },
    '/pet/{petId}/uploadImage': { post: [Object] },
    '/store/inventory': { get: [Object] },
    '/store/order': { post: [Object] },
    '/store/order/{orderId}': { get: [Object], delete: [Object] },
    '/user': { post: [Object] },
    '/user/createWithList': { post: [Object] },
    '/user/login': { get: [Object] },
    '/user/logout': { get: [Object] },
    '/user/{username}': { get: [Object], put: [Object], delete: [Object] }
  },
  components: {
    schemas: {
      Order: [Object],
      Customer: [Object],
      Address: [Object],
      Category: [Object],
      User: [Object],
      Tag: [Object],
      Pet: [Object],
      ApiResponse: [Object]
    },
    requestBodies: { Pet: [Object], UserArray: [Object] },
    securitySchemes: { petstore_auth: [Object], api_key: [Object] }
  }
}
{
  post: {
    tags: [ 'pet' ],
    summary: 'uploads an image',
    description: '',
    operationId: 'uploadFile',
    parameters: [
        {
            name: 'petId',
            in: 'path',
            description: 'ID of pet to update',
            required: true,
            schema: { type: 'integer', format: 'int64' }
        },
        {
            name: 'additionalMetadata',
            in: 'query',
            description: 'Additional Metadata',
            required: false,
            schema: { type: 'string' }
        }
    ],
    requestBody: { content: [Object] },
    responses: { '200': [Object] },
    security: [ [Object] ]
  }
}

*/
